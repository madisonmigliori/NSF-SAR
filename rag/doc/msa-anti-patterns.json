{ "anti-patterns": [
    {
        "name": "ESB Usage",
        "description": "Use of an Enterprise Service Bus (ESB) can create a single point of failure and increase coupling, violating microservice independence.",
        "impact": [
            "High Coupling",
            "Single Point of Failure"
        ],
        "severity": "High"
    },
    {
        "name": "Too Many Standards",
        "description": "Multiple frameworks or inconsistent standards across teams reduce maintainability and coherence.",
        "impact": [
            "Low Maintainability",
            "Reduced Developer Efficiency"
        ],
        "severity": "Medium"
    },
    {
        "name": "Wrong Cuts",
        "description": "Splitting services by technical layers (e.g., data/business/presentation) rather than by business domain boundaries.",
        "impact": [
            "Poor Service Cohesion",
            "Increased Inter-service Communication"
        ],
        "severity": "High"
    },
    {
        "name": "Not Having an API Gateway",
        "description": "Lack of an API Gateway leads to uncontrolled direct communication among services, especially in large systems.",
        "impact": [
            "Security Risks",
            "Scalability Issues"
        ],
        "severity": "Medium"
    },
    {
        "name": "Hard-Coded Endpoints",
        "description": "Using hardcoded IPs or ports makes services brittle to infrastructure changes and reduces scalability.",
        "impact": [
            "Low Flexibility",
            "Deployment Challenges"
        ],
        "severity": "High"
    },
    {
        "name": "API Versioning",
        "description": "Lack of API versioning creates difficulties in managing backward compatibility.",
        "impact": [
            "Deployment Risks",
            "Service Instability"
        ],
        "severity": "Medium"
    },
    {
        "name": "Microservice Greedy",
        "description": "Creating microservices for every feature leads to excessive fragmentation and overhead.",
        "impact": [
            "Overhead",
            "Reduced Performance"
        ],
        "severity": "Medium"
    },
    {
        "name": "Shared Persistency",
        "description": "Two or more services sharing the same database breaks data autonomy.",
        "impact": [
            "Data Coupling",
            "Violation of Service Boundaries"
        ],
        "severity": "High"
    },
    {
        "name": "Inappropriate Service Intimacy",
        "description": "One service accessing private data of another breaks encapsulation.",
        "impact": [
            "Security Risks",
            "Tight Coupling"
        ],
        "severity": "High"
    },
    {
        "name": "Shared Libraries",
        "description": "Tightly coupling microservices via common libraries increases fragility and change ripple.",
        "impact": [
            "Coupling",
            "Low Modularity"
        ],
        "severity": "Medium"
    },
    {
        "name": "Cyclic Dependency",
        "description": "Cyclic service calls increase complexity and hinder maintainability.",
        "impact": [
            "Complex Call Chains",
            "Debugging Difficulty"
        ],
        "severity": "High"
    }
]
}